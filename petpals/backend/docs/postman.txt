# Authentication


##  Register User:

Method: POST
URL: http://localhost:5000/api/register
Headers: None
Body (JSON):
{
"fullname": "John Doe",
"username": "johndoe",
"email": "john.doe@example.com",
"password": "securepassword",
"gender": "male"
}

Expected Response:
{
"message": "Registration Successful!",
"access_token": "your_access_token",
"user": {
"fullname": "John Doe",
"username": "johndoe",
"email": "john.doe@example.com",
"gender": "male"
}
}
  
##  Login User:

Method: POST
URL: http://localhost:5000/api/login
Headers: None
Body (JSON):

{
"email": "john.doe@example.com",
"password": "securepassword"
}

Expected Response:
{
"message": "Login Successful!",
"access_token": "your_access_token",
"user": {
"fullname": "John Doe",
"username": "johndoe",
"email": "john.doe@example.com",
"gender": "male"
}
}

##  Logout User:

Method: POST
URL: http://localhost:5000/api/logout
Headers: None
Body: None

Expected Response:
{
"message": "Logged out"
}

##  Refresh Access Token:

Method: POST
URL: http://localhost:5000/api/refresh_token
Headers: None
Body: None

Expected Response
{
"access_token": "your_new_access_token",
"user": {
"fullname": "John Doe",
"username": "johndoe",
"email": "john.doe@example.com",
"gender": "male"
}
}

# User  

 
##  Get All Users:


Method: GET
URL: http://localhost:5000/api/users
Headers:
Key: Authorization, Value: Bearer your_access_token
Body: None

Expected Response:
{
"message": "All users retrieved successfully",
"users": [
{
"fullname": "User 1",
"username": "user1",
"email": "user1@example.com",
"gender": "male"
},
// Additional users...
]
}

##  Search Users:

Method: GET
URL: http://localhost:5000/api/search
Headers:
Key: Authorization, Value: Bearer your_access_token
Body (Optional):
{
"query": "search_term"
}

Expected Response:
{
"message": "Users found successfully",
"users": [
{
"fullname": "User A",
"username": "userA",
"email": "userA@example.com",
"gender": "female"
},
// Additional users...
]
}

##  Get User by ID:

Method: GET
URL: http://localhost:5000/api/user/:id
Headers:
Key: Authorization, Value: Bearer your_access_token
Body: None

Expected Response:
{
"message": "User retrieved successfully",
"user": {
"fullname": "User XYZ",
"username": "userXYZ",
"email": "userXYZ@example.com",
"gender": "male"
}
}

##  Update User:

Method: PATCH
URL: http://localhost:5000/api/user
Headers:
Key: Authorization, Value: Bearer your_access_token
Body (JSON):
{
"fullname": "Updated User",
"gender": "female"
}

Expected Response:
{
"message": "User updated successfully",
"user": {
"fullname": "Updated User",
"username": "userXYZ",
"email": "userXYZ@example.com",
"gender": "female"
}
}

## Send Friend Request:

Method: PATCH
URL: http://localhost:5000/api/user/:id/friend
Headers:
Key: Authorization, Value: Bearer your_access_token
Body: None

Expected Response:
{
"message": "Friend request sent successfully"
}

##  Unfriend User:

Method: PATCH
URL: http://localhost:5000/api/user/:id/unfriend
Headers:
Key: Authorization, Value: Bearer your_access_token
Body: None

Expected Response:
{
"message": "User unfriended successfully"
}


# Posts 


##  Create Post:

Method: POST
URL: http://localhost:5000/api/posts
Headers:
Key: Authorization, Value: Bearer your_access_token
Body (JSON):
{
"content": "This is a new post."
}

Expected Response:
{
"message": "Post created successfully",
"post": {
"content": "This is a new post.",
"author": "your_user_id",
"createdAt": "timestamp",
"updatedAt": "timestamp"
}
}

##  Get All Posts:

Method: GET
URL: http://localhost:5000/api/posts
Headers:
Key: Authorization, Value: Bearer your_access_token
Body: None

Expected Response:
{
"message": "Posts retrieved successfully",
"posts": [
{
"content": "Post content.",
"author": {
"fullname": "Author Name",
"username": "author_username"
},
"createdAt": "timestamp",
"updatedAt": "timestamp"
},
// More posts...
]
}

##  Get Single Post:

Method: GET
URL: http://localhost:5000/api/posts/:id
Headers:
Key: Authorization, Value: Bearer your_access_token
Body: None

Expected Response:
{
"message": "Post retrieved successfully",
"post": {
"content": "Post content.",
"author": {
"fullname": "Author Name",
"username": "author_username"
},
"createdAt": "timestamp",
"updatedAt": "timestamp"
}
}

##  Update Post:

Method: PATCH
URL: http://localhost:5000/api/posts/:id
Headers:
Key: Authorization, Value: Bearer your_access_token
Body (JSON):
{
"content": "Updated post content."
}

Expected Response:
{
"message": "Post updated successfully",
"post": {
"content": "Updated post content.",
"updatedAt": "timestamp"
}
}

##  Delete Post:

Method: DELETE
URL: http://localhost:5000/api/posts/:id
Headers:
Key: Authorization, Value: Bearer your_access_token
Body: None

Expected Response:
{
"message": "Post deleted successfully",
"post": {
"content": "Deleted post content.",
"author": "your_user_id",
"createdAt": "timestamp",
"updatedAt": "timestamp"
}
}

##  Like Post:

Method: PATCH
URL: http://localhost:5000/api/posts/:id/like
Headers:
Key: Authorization, Value: Bearer your_access_token
Body: None

Expected Response:
{
"message": "Post liked successfully",
"post": {
"content": "Post content.",
"likes": [
"user_id_1",
"user_id_2",
// More user IDs...
]
}
}

##  Unlike Post:

Method: PATCH
URL: http://localhost:5000/api/posts/:id/unlike
Headers:
Key: Authorization, Value: Bearer your_access_token
Body: None

Expected Response:
{
"message": "Post unliked successfully",
"post": {
"content": "Post content.",
"likes": [
"user_id_2",
// More user IDs...
]
}
}

##  Get User's Posts:

Method: GET
URL: http://localhost:5000/api/user_posts/:id
Headers:
Key: Authorization, Value: Bearer your_access_token
Body: None
Expected Response:
{
"message": "User's posts retrieved successfully",
"posts": [
{
"content": "Post content.",
"createdAt": "timestamp",
"updatedAt": "timestamp"
},
// More posts...
]
}

## Save Post:

Method: PATCH
URL: http://localhost:5000/api/save_post/:id
Headers:
Key: Authorization, Value: Bearer your_access_token
Body: None

Expected Response:
{
"message": "Post saved successfully",
"post": {
"content": "Post content.",
"saves": [
"user_id_1",
"user_id_2",
// More user IDs...
]
}
}

##  Unsave Post:

Method: PATCH
URL: http://localhost:5000/api/unsave_post/:id
Headers:
Key: Authorization, Value: Bearer your_access_token
Body: None

Expected Response:
{
"message": "Post unsaved successfully",
"post": {
"content": "Post content.",
"saves": [
"user_id_2",
// More user IDs...
]
}
}

##  Get Saved Posts:

Method: GET
URL: http://localhost:5000/api/savedpost
Headers:
Key: Authorization, Value: Bearer your_access_token
Body: None

Expected Response:
{
"message": "Saved posts retrieved successfully",
"posts": [
{
"content": "Post content.",
"createdAt": "timestamp",
"updatedAt": "timestamp"
},
// More posts...
]
}

Please replace placeholders like your_access_token, your_user_id, and adjust content as needed.

  
# Comments 

  

##  Create Comment:

Method: POST
URL: http://localhost:5000/api/comment
Headers:
Key: Authorization, Value: Bearer your_access_token
Body (JSON):
{
"post_id": "your_post_id",
"content": "This is a new comment."
}

Expected Response:
{
"message": "Comment created successfully",
"comment": {
"content": "This is a new comment.",
"author": "your_user_id",
"post": "your_post_id",
"createdAt": "timestamp",
"updatedAt": "timestamp"
}
}

##  Update Comment:

Method: PATCH
URL: http://localhost:5000/api/comment/:id
Headers:
Key: Authorization, Value: Bearer your_access_token
Body (JSON):
{
"content": "Updated comment content."
}

Expected Response:
{
"message": "Comment updated successfully",
"comment": {
"content": "Updated comment content.",
"updatedAt": "timestamp"
}
}

##  Like Comment:

Method: PATCH
URL: http://localhost:5000/api/comment/:id/like
Headers:
Key: Authorization, Value: Bearer your_access_token
Body: None

Expected Response:
{
"message": "Comment liked successfully",
"comment": {
"content": "Comment content.",
"likes": [
"user_id_1",
"user_id_2",
// More user IDs...
]
}
}

##  Unlike Comment:

Method: PATCH
URL: http://localhost:5000/api/comment/:id/unlike
Headers:
Key: Authorization, Value: Bearer your_access_token
Body: None

Expected Response:
{
"message": "Comment unliked successfully",
"comment": {
"content": "Comment content.",
"likes": [
"user_id_2",
// More user IDs...
]
}
}

##  Delete Comment:

Method: DELETE
URL: http://localhost:5000/api/comment/:id
Headers:
Key: Authorization, Value: Bearer your_access_token
Body: None

Expected Response:
{
"message": "Comment deleted successfully",
"comment": {
"content": "Deleted comment content.",
"author": "your_user_id",
"post": "your_post_id",
"createdAt": "timestamp",
"updatedAt": "timestamp"
}
}

Please replace placeholders like your_access_token, your_user_id, your_post_id, and adjust content as needed.


# Notifications

  

##  Create Notification:

Method: POST
URL: http://localhost:5000/api/notify
Headers:
Key: Authorization, Value: Bearer your_access_token
Body (JSON):
{
"user": "user_id",
"content": "This is a new notification."
}

Expected Response:
{
"message": "Notification created successfully",
"notification": {
"_id": "notification_id",
"user": "user_id",
"content": "This is a new notification.",
"createdAt": "timestamp",
"updatedAt": "timestamp",
"isRead": false
}
}

##  Remove Notification:

Method: DELETE
URL: http://localhost:5000/api/notify/:id
Headers:
Key: Authorization, Value: Bearer your_access_token
Body: None

Expected Response:
{
"message": "Notification removed successfully",
"notification": {
"_id": "notification_id",
"user": "user_id",
"content": "Notification content.",
"createdAt": "timestamp",
"updatedAt": "timestamp",
"isRead": false
}
}

##  Get Notifications:

Method: GET
URL: http://localhost:5000/api/notifies
Headers:
Key: Authorization, Value: Bearer your_access_token
Body: None

Expected Response:
{
"message": "Notifications retrieved successfully",
"notifications": [
{
"_id": "notification_id_1",
"user": "user_id",
"content": "Notification content 1.",
"createdAt": "timestamp",
"updatedAt": "timestamp",
"isRead": false
},
{
"_id": "notification_id_2",
"user": "user_id",
"content": "Notification content 2.",
"createdAt": "timestamp",
"updatedAt": "timestamp",
"isRead": false
},
// More notifications...
]
}

##  Delete All Notifications:

Method: DELETE
URL: http://localhost:5000/api/deleteallnotify
Headers:
Key: Authorization, Value: Bearer your_access_token
Body: None

Expected Response:
{
"message": "All notifications deleted successfully"
}

##  Mark Notification as Read:

Method: PATCH
URL: http://localhost:5000/api/isreadnotify/:id
Headers:
Key: Authorization, Value: Bearer your_access_token
Body: None

Expected Response:
{
"message": "Notification marked as read successfully",
"notification": {
"_id": "notification_id",
"user": "user_id",
"content": "Notification content.",
"createdAt": "timestamp",
"updatedAt": "timestamp",
"isRead": true
}
}

Please replace placeholders like your_access_token, user_id, notification_id, and adjust content as needed.


# Messages

  
##  Create Message:

Method: POST
URL: http://localhost:5000/api/message
Headers:
Key: Authorization, Value: Bearer your_access_token
Body (JSON):
{
"content": "Hello, this is a new message.",
"to": "recipient_user_id"
}

Expected Response:
{
"message": "Message sent successfully",
"message": {
"_id": "message_id",
"content": "Hello, this is a new message.",
"from": "sender_user_id",
"to": "recipient_user_id",
"createdAt": "timestamp",
"updatedAt": "timestamp"
}
}

##  Get Conversations:

Method: GET
URL: http://localhost:5000/api/conversations/:id
Headers:
Key: Authorization, Value: Bearer your_access_token
Body: None
Expected Response:
{
"message": "Conversations retrieved successfully",
"conversations": [
{
"_id": "conversation_id_1",
"members": ["user_id_1", "user_id_2"],
"lastMessage": {
"_id": "last_message_id_1",
"content": "Last message content 1.",
"from": "user_id_1",
"to": "user_id_2",
"createdAt": "timestamp",
"updatedAt": "timestamp"
}
},
{
"_id": "conversation_id_2",
"members": ["user_id_1", "user_id_3"],
"lastMessage": {
"_id": "last_message_id_2",
"content": "Last message content 2.",
"from": "user_id_1",
"to": "user_id_3",
"createdAt": "timestamp",
"updatedAt": "timestamp"
}
},
// More conversations...
]
}

##  Get Messages:

Method: GET
URL: http://localhost:5000/api/message/:id
Headers:
Key: Authorization, Value: Bearer your_access_token
Body: None

Expected Response:
{
"message": "Messages retrieved successfully",
"messages": [
{
"_id": "message_id_1",
"content": "Message content 1.",
"from": "user_id_1",
"to": "user_id_2",
"createdAt": "timestamp",
"updatedAt": "timestamp"
},
{
"_id": "message_id_2",
"content": "Message content 2.",
"from": "user_id_2",
"to": "user_id_1",
"createdAt": "timestamp",
"updatedAt": "timestamp"
},
// More messages...
]
}

##  Delete Messages:

Method: DELETE
URL: http://localhost:5000/api/message/:id
Headers:
Key: Authorization, Value: Bearer your_access_token
Body: None

Expected Response:
{
"message": "Messages deleted successfully"
}

Please replace placeholders like your_access_token, user_id, recipient_user_id, message_id, conversation_id, and adjust content as needed.

***
  

#  About AUTHORIZATION TOKEN

  
  

If you want to retrieve a list of all users and this operation requires authentication, you need to obtain an access token through your authentication mechanism and include it in the request headers.

Here are the general steps:

Authenticate the User:

Use your authentication endpoint (e.g., login) to obtain an access token.

This typically involves sending a POST request with the user's credentials (username, password) to the authentication endpoint.

Get the Access Token:

Extract the access token from the response after successful authentication.

Include Token in Requests:

For every subsequent request that requires authentication, include the obtained access token in the "Authorization" header.

Example in Postman:

Open Postman.

Select the request to get all users (e.g., "GET /api/users").

Click on the "Headers" tab.

Add a new header with the key "Authorization" and the value "Bearer YOUR_ACCESS_TOKEN," replacing "YOUR_ACCESS_TOKEN" with the actual access token.


#  About id:s (after we have data)

  

When you send a GET request to retrieve data, the server will respond with the details of the requested resource,

including its unique identifier (ID). For example, if you make a GET request to /api/user/123, the server should

respond with information about the user with the ID 123, and you can find the ID in the response.
 

Here's a simplified example:
{
"id": "123",
"username": "example_user",
"email": "user@example.com",
"otherDetails": "..."
}


In this response, the "id" field contains the unique identifier for the user, which is 123 in this case.

You can use this ID in subsequent requests if you need to update or perform other actions related to this specific user.

When you retrieve data from an API, the response includes the unique identifier (ID) of the requested resource.

This applies not only to user data but also to other resources such as posts, comments, messages, etc.

For example, if you make a GET request to /api/post/456, the server should respond with details about the post

with the ID 456, and you can find the ID in the response.


Here's a simplified example for a post:

{
"id": "456",
"title": "Example Post",
"content": "This is the content of the post.",
"author": "user123",
"timestamp": "2024-02-10T12:34:56Z",
"otherDetails": "..."
}

In this response, the "id" field contains the unique identifier for the post, which is 456 in this case.

You can use this ID for subsequent actions related to this specific post. The same principle applies to other resources like comments, messages, etc.